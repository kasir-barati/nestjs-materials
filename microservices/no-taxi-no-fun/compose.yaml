services:
  driver-api:
    image: driver-api
    container_name: driver-api-container
    ports:
      - ${DRIVER_API_PORT}:${DRIVER_API_PORT}
    build:
      context: .
      dockerfile: ./apps/driver-api/Dockerfile
      args:
        DRIVER_API_PORT: ${DRIVER_API_PORT}
        MICROSERVICES_WORKDIR: ${MICROSERVICES_WORKDIR}
    depends_on:
      driver-api-db:
        condition: service_healthy
      message-brocker:
        condition: service_healthy
    env_file:
      - .env
      - apps/driver-api/.env

  verification-api:
    image: verification-api
    container_name: verification-api-container
    ports:
      - ${VERIFICATION_API_PORT}:${VERIFICATION_API_PORT}
    build:
      context: .
      dockerfile: ./apps/verification-api/Dockerfile
      args:
        VERIFICATION_API_PORT: ${VERIFICATION_API_PORT}
        MICROSERVICES_WORKDIR: ${MICROSERVICES_WORKDIR}
    depends_on:
      verification-api-db:
        condition: service_healthy
      message-brocker:
        condition: service_healthy
    env_file:
      - .env
      - apps/verification-api/.env

  driver-api-db:
    image: mongo:8.0.0-rc17-noble
    container_name: driver-api-database
    ports:
      - 27018:27017
    entrypoint:
      - bash
      - -c
      - |
        openssl rand -base64 756 > /data/replica.key
        chmod 400 /data/replica.key
        chown 999:999 /data/replica.key
        exec docker-entrypoint.sh $$@
    command: mongod --replSet rs0 --keyFile /data/replica.key
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  verification-api-db:
    image: mongo:8.0.0-rc17-noble
    container_name: verification-api-database
    ports:
      - 27019:27017
    entrypoint:
      - bash
      - -c
      - |
        openssl rand -base64 756 > /data/replica.key
        chmod 400 /data/replica.key
        chown 999:999 /data/replica.key
        exec docker-entrypoint.sh $$@
    command: mongod --replSet rs0 --keyFile /data/replica.key
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  message-brocker:
    image: rabbitmq:4.0-rc-management-alpine
    ports:
      - 5672:5672
      - 15672:15672
    user: ${RABBITMQ_DEFAULT_USER}
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 1s
      timeout: 3s
      retries: 30

  driver-api-db-init:
    image: mongo:8.0.0-rc17-noble
    restart: "no"
    depends_on:
      driver-api-db:
        condition: service_healthy
    env_file: .env
    command: >
      mongosh --username ${MONGO_INITDB_ROOT_USERNAME} --password ${MONGO_INITDB_ROOT_PASSWORD} --host driver-api-db:27017 --eval
      '
      rs.initiate( {
         _id : "rs0",
         members: [
            { _id: 0, host: "driver-api-db:27017" }
         ]
      })
      '

  verification-api-db-init:
    image: mongo:8.0.0-rc17-noble
    restart: "no"
    depends_on:
      verification-api-db:
        condition: service_healthy
    env_file: .env
    command: >
      mongosh --username ${MONGO_INITDB_ROOT_USERNAME} --password ${MONGO_INITDB_ROOT_PASSWORD} --host verification-api-db:27017 --eval
      '
      rs.initiate( {
         _id : "rs0",
         members: [
            { _id: 0, host: "verification-api-db:27017" }
         ]
      })
      '
