import {
  EmailNotificationMicroservicesPayload,
  EVENT_PATTERN_FOR_EMAIL_NOTIFICATION,
  generateRandomString,
} from '@app/common';
import { Channel } from 'amqplib';

export class EmailNotificationBuilder
  implements EmailNotificationMicroservicesPayload
{
  email: string;
  html?: string;
  text?: string;
  retryCount?: number;

  constructor() {
    this.email = generateRandomString() + '@email.builder';
    this.html = '<h1>Generated by email notification builder</h1>';
  }

  withEmail(value: string): EmailNotificationBuilder {
    this.email = value;
    return this;
  }
  withHtml(value: string): EmailNotificationBuilder {
    this.html = value;
    return this;
  }
  withText(value: string): EmailNotificationBuilder {
    this.text = value;
    return this;
  }
  withRetryCount(value: number): EmailNotificationBuilder {
    this.retryCount = value;
    return this;
  }
  async build(channel: Channel): Promise<void> {
    const data: EmailNotificationMicroservicesPayload = {
      email: this.email,
      html: this.html,
      retryCount: this.retryCount,
      text: this.text,
    };
    const { NOTIFICATION_QUEUE } = process.env;

    channel.sendToQueue(
      NOTIFICATION_QUEUE,
      Buffer.from(
        JSON.stringify({
          data,
          pattern: EVENT_PATTERN_FOR_EMAIL_NOTIFICATION,
        }),
      ),
    );
  }
}
